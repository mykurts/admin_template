#
# This file tells systemd how to run Sidekiq as a 24/7 long-running daemon.
#
# Customize this file based on your bundler location, app directory, etc.
# Customize and copy this into /usr/lib/systemd/system (CentOS) or /lib/systemd/system (Ubuntu).
# Then run:
#   - systemctl enable sidekiq
#   - systemctl {start,stop,restart} sidekiq
#
# This file corresponds to a single Sidekiq process.  Add multiple copies
# to run multiple processes (sidekiq-1, sidekiq-2, etc).
#
# Use `journalctl -u sidekiq -rn 100` to view the last 100 lines of log output.
#
[Unit]
Description=sidekiq
# start us only once the network and logging subsystems are available,
# consider adding redis-server.service if Redis is local and systemd-managed.
After=syslog.target network.target

# See these pages for lots of options:
#
#   https://www.freedesktop.org/software/systemd/man/systemd.service.html
#   https://www.freedesktop.org/software/systemd/man/systemd.exec.html
#
# THOSE PAGES ARE CRITICAL FOR ANY LINUX DEVOPS WORK; read them multiple
# times! systemd is a critical tool for all developers to know and understand.
#
[Service]
#
#      !!!!  !!!!  !!!!
#
# As of v6.0.6, Sidekiq automatically supports systemd's `Type=notify` and watchdog service
# monitoring. If you are using an earlier version of Sidekiq, change this to `Type=simple`
# and remove the `WatchdogSec` line.
#
#      !!!!  !!!!  !!!!
#
#EnvironmentFile=/home/kurt/Documents/RubyProjects/.env_file
EnvironmentFile=/home/deploy/app/cbm-web/.side_kiq_env
#EnvironmentFile=/home/deploy/app/cbm-phase-2-admin/.side_kiq_env

Type=notify
# If your Sidekiq process locks up, systemd's watchdog will restart it within seconds.
WatchdogSec=10

#WorkingDirectory=/home/kurt/Documents/RubyProjects/cebu-business-rails
WorkingDirectory=/home/deploy/app/cbm-web
#WorkingDirectory=/home/deploy/app/cbm-phase-2-admin

# If you use rbenv:
# ExecStart=/bin/bash -lc 'exec /home/deploy/.rbenv/shims/bundle exec sidekiq -e production'
# If you use the system's ruby:
# ExecStart=/usr/local/bin/bundle exec sidekiq -e production

# If you use rvm in production without gemset and your ruby version is 2.6.5
# ExecStart=/home/deploy/.rvm/gems/ruby-2.6.5/wrappers/bundle exec sidekiq -e production

# If you use rvm in production with gemset and your ruby version is 2.7.1
ExecStart=/home/deploy/.rvm/gems/ruby-3.0.0@cebu-business-rails/wrappers/bundle exec sidekiq -e production
#ExecStart=/home/kurt/.rvm/gems/ruby-3.0.0@cebu-business-rails/wrappers/bundle exec sidekiq

# Use `systemctl kill -s TSTP sidekiq` to quiet the Sidekiq process

# !!! Change this to your deploy user account !!!
#User=kurt
#Group=kurt

#deployment
User=deploy
Group=deploy

UMask=0002

# Greatly reduce Ruby memory fragmentation and heap usage
# https://www.mikeperham.com/2018/04/25/taming-rails-memory-bloat/
Environment=MALLOC_ARENA_MAX=2

# if we crash, restart
RestartSec=1
Restart=on-failure

# output goes to /var/log/syslog (Ubuntu) or /var/log/messages (CentOS)
StandardOutput=syslog
StandardError=syslog

# This will default to "bundler" if we don't specify it
SyslogIdentifier=sidekiq

[Install]
WantedBy=multi-user.target

#Instruction to deploy
# install redis first, https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-redis-on-ubuntu-18-04
# cd to project directory then "sudo systemctl link ./config/sidekiq_service/admin_sidekiq.service"
# "sudo systemctl daemon-reload"
# "sudo systemctl enable admin_sidekiq"
# "sudo systemctl start admin_sidekiq"
# command follows
# "sudo systemctl restart admin_sidekiq"
# "sudo systemctl stop admin_sidekiq"
# "sudo systemctl status admin_sidekiq"
# "journalctl -r" == show the latest logs for systemd admin_sidekiq 